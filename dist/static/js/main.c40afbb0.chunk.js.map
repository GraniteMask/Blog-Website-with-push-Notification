{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbconfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","firebase","links","uid","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","toString","calendar","ProjectList","projects","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstname","lastname","signUp","newUser","getstate","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","console","log","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","fbconfig","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","rrfProps","config","userProfile","useFirestoreForProfile","enableRedirectHandling","resetBeforeLogin","createFirestoreInstance","AuthIsLoaded","children","useSelector","isLoaded","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.c40afbb0.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {signOut} from '../../store/actions/authActions'\r\n\r\nconst SignedInLinks =(props)=>{\r\n    return(\r\n        <ul className=\"right\">\r\n            <li><NavLink to='/create'>New Project</NavLink></li>\r\n            <li><a onClick={props.signOut}>Log Out</a></li>\r\n            <li><NavLink to='/' className=\"btn btn-floating pink lighten-1\">{props.profile.initials}</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch)=>{\r\n    return{\r\n        signOut: ()=> dispatch(signOut())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks)","export const signIn = (credentials) =>{\r\n    return (dispatch, getState, {getFirebase}) =>{\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(()=>{\r\n            dispatch({type:'LOGIN_SUCCESS'});\r\n        }).catch((err)=>{\r\n           dispatch({type: 'LOGIN_ERROR', err}); \r\n        });\r\n    }\r\n}\r\n\r\nexport const signOut=()=>{\r\n    return (dispatch,getState, {getFirebase})=>{\r\n      const firebase=getFirebase();\r\n      firebase.auth().signOut().then(()=>{\r\n        dispatch({type: 'SIGNOUT_SUCCESS'});\r\n      }) \r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) =>{\r\n    return (dispatch, getstate, {getFirebase, getFirestore}) =>{\r\n        const firebase =getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((resp)=>{\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstname: newUser.firstname,\r\n                lastname: newUser.lastname,\r\n                initials: newUser.firstname[0] + newUser.lastname[0]\r\n            })\r\n        }).then(()=>{\r\n            dispatch({type: 'SIGNUP_SUCCESS'})\r\n        }).catch(err=>{\r\n            dispatch({type: 'SIGNUP_ERROR', err})\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst SignedOutLinks =()=>{\r\n    return(\r\n        <ul className=\"right\">\r\n            <li><NavLink to='/signup'>Signup</NavLink></li>\r\n            <li><NavLink to='/signin'>Login</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport SignedInLinks from './SignedInLinks'\r\nimport SignedOutLinks from './SignedOutLinks'\r\nimport {connect} from 'react-redux' \r\n\r\nconst Navbar =(props)=>{\r\n    const {auth, profile} =props;\r\n    //console.log(auth)\r\n    const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />;\r\n    return(\r\n        <nav className=\"nav-wrapper grey darken-3\">\r\n            <div className=\"container\">\r\n                <Link to='/' className=\"brand-logo\">MarioPlan</Link>\r\n                {links}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    //console.log(state)\r\n    return{\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Notifications=(props)=>{\r\n    const {notifications} = props;\r\n    return(\r\n        <div className=\"section\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title\">Notifications</span>\r\n                    <ul className=\"notifications\">\r\n                        {notifications && notifications.map(item=>{\r\n                            return(\r\n                                <li key={item.id}>\r\n                                    <span className=\"pink-text\">\r\n                                        {item.user} \r\n                                    </span>\r\n                                    <span> {item.content}</span>\r\n                                    <div className=\"grey-text note-date\">\r\n                                        {moment(item.time.toDate()).fromNow()}\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications\r\n\r\n\r\n//{notifications && notifications.map()} is used so that if first notification exists then it will execute map function\r\n\r\n//npm install moment\r\n\r\n//Don't forget to change rules for notifications","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst ProjectSummary =({project})=>{\r\n    return(\r\n        <div className=\"card z-depth-0 project-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{project.title}</span>\r\n                <p>Posted By {project.authorFirstName} {project.authorLastName}</p>\r\n                <p className=\"grey-text\">{moment(project.createdAt.toDate().toString()).calendar()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProjectSummary\r\n\r\n//toString() is used because toDate can't be shown directly in app\r\n\r\n//npm install moment : this will help us to give a short date format...not like FRI Date time indian standard time long format\r\n\r\n//for more formats of moment we can visit momentjs.com","import React from 'react'\r\nimport ProjectSummary from './ProjectSummary'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst ProjectList =({projects})=>{\r\n    return(\r\n        <div className=\"project-list section\">\r\n            {projects && projects.map(project=>{\r\n                return(\r\n                    <Link to={'/project/' + project.id} key={project.id}>\r\n                        <ProjectSummary project={project}  />\r\n                    </Link>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectList","import React, {Component} from 'react'\r\nimport Notifications from './Notifications'\r\nimport ProjectList from '../projects/ProjectList'\r\nimport {connect} from 'react-redux'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Dashboard extends Component {\r\n    render(){\r\n        const {projects, auth, notifications} = this.props;\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n        return(\r\n           <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m6\">\r\n                        <ProjectList projects={projects}/>\r\n                    </div>\r\n                    <div className=\"col s12 m5 offset-m1\">\r\n                        <Notifications notifications={notifications}/>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        )\r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps =(state)=>{\r\n    return{\r\n       projects: state.firestore.ordered.projects,\r\n       auth: state.firebase.auth,\r\n       notifications: state.firestore.ordered.notifications\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        {collection: 'projects', orderBy: ['createdAt', 'desc']},\r\n        {collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\r\n    ])\r\n)(Dashboard)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport moment from 'moment'\r\n\r\nconst ProjectDetails =(props)=>{\r\n    const {project, auth}= props;\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n    if (project){\r\n        return(\r\n            <div className=\"container section project-details\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title\">{project.title}</span>\r\n                    <p>{project.content}</p>\r\n                </div>\r\n                <div className=\"card-action gret lighten-4 grey-text\">\r\n                    <div>Posted by {project.authorFirstName} {project.authorLastName}</div>\r\n                    <div>{moment(project.createdAt.toDate().toString()).calendar()}</div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n       )  \r\n    }else{\r\n        return(\r\n            <div className=\"container center\">\r\n                <p>Loading Project...</p>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nconst mapStateToProps =(state, ownProps)=>{\r\n    const id= ownProps.match.params.id;\r\n    const projects= state.firestore.data.projects;\r\n    const project= projects ? projects[id] : null\r\n    return{\r\n        project: project,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        {collection: 'projects'}\r\n    ])\r\n)(ProjectDetails)","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {signIn} from '../../store/actions/authActions'\r\nimport {Redirect} from 'react-router-dom'\r\n \r\nclass SignIn extends Component {\r\n    state={\r\n        email:'',\r\n        password:''\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.signIn(this.state)\r\n    }\r\n    render() {\r\n        const {authError, auth} = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className=\"conatiner\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">Log In</button>\r\n                        <div className=\"red-text center\">\r\n                            {authError ? <p>{authError}</p> : null}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps =(state)=>{\r\n    return{\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps= (dispatch)=>{\r\n    return{\r\n        signIn: (creds) => dispatch(signIn(creds))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\r\n","import React, { Component } from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {signUp} from '../../store/actions/authActions'\r\n\r\nclass SignUp extends Component {\r\n    state={\r\n        email:'',\r\n        password:'',\r\n        firstname:'',\r\n        lastname:''\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.signUp(this.state)\r\n    }\r\n    render() {\r\n        const {auth, authError} = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstname\">First Name</label>\r\n                        <input type=\"text\" id=\"firstname\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastname\">Last Name</label>\r\n                        <input type=\"text\" id=\"lastname\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">Sign up</button>\r\n                        <div className=\"red-text center\">\r\n                            {authError ? <p>{authError}</p> : null}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        signUp: (newUser)=>dispatch(signUp(newUser))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createProject} from '../../store/actions/projectActions'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass CreateProject extends Component {\r\n    state={\r\n        title:'',\r\n        content:''\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.createProject(this.state)\r\n        //console.log(this.state)\r\n        this.props.history.push('/')\r\n    }\r\n    render() {\r\n        const {auth} = this.props;\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Create new project</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"content\">Project Content</label>\r\n                        <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}>\r\n                        </textarea>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        createProject: (project)=> dispatch(createProject(project))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)\r\n","export const createProject=(project)=>{\r\n    return(dispatch, getState, {getFirebase, getFirestore}) =>{\r\n        //make async call to database\r\n\r\n        const firestore= getFirestore();\r\n        const profile = getState().firebase.profile;\r\n        const authorId= getState().firebase.auth.uid;\r\n        firestore.collection('projects').add({\r\n            ...project,\r\n            authorFirstName: profile.firstname,\r\n            authorLastName: profile.lastname,\r\n            authorId: authorId,\r\n            createdAt: new Date()\r\n        }).then(()=>{\r\n          dispatch({type: 'CREATE_PROJECT', project}); //or project:project  \r\n        }).catch((err)=>{\r\n            dispatch({type: 'CREATE_PROJECT_ERROR', err});\r\n        })     \r\n    }\r\n};\r\n// here then method ensures that when the data gets fully uploaded only then it will trigger dispatch function\r\n\r\n//here firestore.collection method returns a promise...that means that at some time the task of uploading will complete \r\n\r\n//catch function will catch error if during upload some error occurs","import React, {Component} from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport ProjectDetails from './components/projects/ProjectDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateProject from './components/projects/CreateProject'\n\nclass App extends Component {\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/project/:id' component={ProjectDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateProject} />     \n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n\n//npm install redux-thunk","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState ={\r\n    authError: null\r\n}\r\nconst authReducer = (state=initState,action)=>{\r\n    switch(action.type){  \r\n        case 'LOGIN_ERROR':\r\n            console.log(\"login error\");\r\n            return{\r\n                ...state,\r\n                authError: 'Login failed'\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            console.log(\"login success\");\r\n            return{\r\n                authError: null\r\n            }\r\n        case 'SIGNOUT_SUCCESS':\r\n            console.log(\"logout success\");\r\n            return state;\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('signup success')\r\n            return{\r\n                ...state,\r\n                authError: null\r\n            }\r\n        case 'SIGNUP_ERROR':\r\n            console.log('signup error')\r\n            return{\r\n               ...state,\r\n               authError: action.err.message\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer","const initState ={\r\n    projects:[\r\n        {id: '1', title: 'help me find peach', content: 'blah'},\r\n        {id: '2', title: 'help me find', content: 'blah blah'}\r\n    ]\r\n}\r\nconst projectReducer = (state=initState,action)=>{\r\n    switch (action.type){\r\n        case 'CREATE_PROJECT':\r\n            return state;\r\n        case 'CREATE_PROJECT_ERROR':\r\n            return state;    \r\n        default:\r\n            return state;      \r\n    }\r\n}\r\n\r\nexport default projectReducer\r\n\r\n","import authReducer from './authReducer'\r\nimport projectReducer from './projectReducer'\r\nimport {combineReducers} from 'redux'\r\nimport {firestoreReducer} from 'redux-firestore'\r\nimport {firebaseReducer} from 'react-redux-firebase'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth:authReducer,\r\n    project: projectReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer"," import firebase from 'firebase/app'\r\n import 'firebase/firestore'\r\n import 'firebase/auth'\r\n import 'firebase/analytics'\r\n \r\n // Your web app's Firebase configuration\r\n var firebaseConfig = {\r\n    apiKey: \"AIzaSyBGOMLlNzu6THICXNa7kHehpbkQxSWcXys\",\r\n    authDomain: \"net-ninja-maioplan.firebaseapp.com\",\r\n    databaseURL: \"https://net-ninja-maioplan.firebaseio.com\",\r\n    projectId: \"net-ninja-maioplan\",\r\n    storageBucket: \"net-ninja-maioplan.appspot.com\",\r\n    messagingSenderId: \"197577457127\",\r\n    appId: \"1:197577457127:web:ad1cec5f33c64281751142\",\r\n    measurementId: \"G-E6KZG7HBK3\"\r\n  };\r\n\r\n  export const fbconfig={\r\n      \r\n  }\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n  firebase.firestore().settings({timestampsInSnapshots: true});\r\n\r\n  export default firebase;\r\n\r\n\r\n  //npm install firebase","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport {reduxFirestore, getFirestore,  createFirestoreInstance} from 'redux-firestore'\nimport { ReactReduxFirebaseProvider,reactReduxFirebase, getFirebase} from 'react-redux-firebase'\nimport firebase, {fbconfig} from './config/fbconfig'\n\n//for attachAuthIsReady or authisloaded with v3 latest version\nimport { useSelector  } from 'react-redux'\nimport { isLoaded  } from 'react-redux-firebase';\n\nconst store = createStore(rootReducer, \n  compose(applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n  reduxFirestore(firebase, fbconfig)\n  //reactReduxFirebase(fbconfig)\n  )\n);\n\n//This piece of code is used to get initials of name in navbar\nconst profileSpecificProps = {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n  enableRedirectHandling: false,\n  resetBeforeLogin: false\n}\n\nconst rrfProps ={\n  firebase,\n  config: fbconfig,\n  config: profileSpecificProps, //This piece of code is used to get initials of name in navbar\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n\n  userProfile: 'users', // where profiles are stored in database\n  presence: 'presence', // where list of online users is stored in database\n  sessions: 'sessions'\n}\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector(state => state.firebase.auth)\n  if (!isLoaded(auth)) return <div>Loading Screen...</div>;\n      return children\n}\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <AuthIsLoaded>\n        <App />\n      </AuthIsLoaded>\n    </ReactReduxFirebaseProvider>   \n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n//install npm redux-thunk\n//npm install react-redux-firebase redux-firestore"],"sourceRoot":""}